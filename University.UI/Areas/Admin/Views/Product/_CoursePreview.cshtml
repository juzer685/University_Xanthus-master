
@model University.UI.Areas.Admin.Models.ProductViewModel
@using University.UI.Areas.Admin.Models
<style>
    .table-bordered, td {
        border-color: black;
    }

    .input-icon {
        position: relative;
    }

        .input-icon > i {
            position: absolute;
            display: block;
            transform: translate(0, -50%);
            top: 45%;
            pointer-events: none;
            width: 28px;
            font-size: 20px;
            text-align: center;
            font-style: normal;
        }

        .input-icon > input {
            padding-left: 20px;
            padding-right: 0;
        }
</style>

<input type="button" class="btn btn-primary" value="Add" onclick="AddProductVideo()" style="float:right" title="Add" />

<div class="row">
    <div id="ProductVideoGrid" class="container-fluid grid-striped">
        <div class="row font-weight-bold py-2">
            <div class="col">
                Title
            </div>
            <div class="col">
                Description
            </div>
            <div class="col">
                Link to Preview
            </div>
            @*<div class="col">
                    Video Tumbnail
                </div>*@
            <div class="col">
                Action
            </div>
        </div>
        @if (Model.CoursePreviewViewModels != null && Model.CoursePreviewViewModels.Count > 0)
        {
            for (int i = 0; i <= Model.CoursePreviewViewModels.Count - 1; i++)
            {
                @Html.Partial("_CoursePreviewVideos", Model.ProductVideos[i])
            }
        }
    </div>

    <div class="container-fluid"><button onclick="Cancel()" type="button" class="btn btn-primary" title="Exit">Exit</button></div>
</div>

<div id="ProductVideoPopup" class="modal" role="dialog">
    <div class="modal-dialog modal-lg">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title"></h4>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body text-center" id="ProductVideoPopupBody">

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>
<script id="ProductVideoTemplate" type="text/html">
    @Html.Partial("_CoursePreviewVideos", new CoursePreviewViewModel() { ProductID = Model.Id })
</script>


<script src="~/Scripts/ProjectValidation.js"></script>

<script>
    var template = $('#ProductVideoTemplate').html();

    
    $(document).ready(function () {
        $("#ProductVideoPopup").on("hidden.bs.modal", function () {
            $("#ProductVideoPopupBody").html('');
            // put your default event here
        });
    });

    function AddFAQ() {
        $('#ProductVideoGrid').append(template);
    }
    function UpdateProductVideo(event, id)
    {
        //$("#DeleteConfirmationModal").modal('show');
        $(document).on('click', 'button#confirmation-yes', function () {
            $.ajax({
                type: "POST",
                url: "/Admin/Product/EditProductVideo",
                data: { ProductVideoId: id }, // serializes the form's elements.
                cache: false,
                success: function (data) {
                   // $('.overlayDelete').css({ "visibility": "", "opacity": "" });
                    //alert('Deleted Successfully');
                   // var tr = $(event).closest("[name=ProductVideoForm]");
                    setTimeout(function () {
                    location.reload();
                }, 1500);
                   // $(tr).remove();
                }
            });
        });
    }


    function DeleteProductVideo(event, id)
    {
        $("#DeleteConfirmationModal").modal('show');
        $(document).on('click', 'button#confirmation-yes', function () {
            $.ajax({
                type: "POST",
                url: "/Admin/Product/DeleteProductVideo",
                data: { ProductVideoId: id }, // serializes the form's elements.
                cache: false,
                success: function (data) {
                    $('.overlayDelete').css({ "visibility": "", "opacity": "" });
                    //alert('Deleted Successfully');
                    var tr = $(event).closest("[name=ProductVideoForm]");
                    $(tr).remove();
                }
            });
        });
    }

    function ShowProductVideo(url) {
        $.ajax({
            type: "POST",
            url: "/Admin/Product/PlayVideo",
            data: { url: url }, // serializes the form's elements.
            cache: false,
            success: function (data) {
                $("#ProductVideoPopupBody").html(data);
                $("#ProductVideoPopup").modal('show');
            }
        });
        //DeleteProductFAQ

    }


    function AddProductVideo() {
        var Vtemplate = $('#ProductVideoTemplate').html();
        $('#ProductVideoGrid').append(Vtemplate);
    }


    function getProductVideoFile(event) {
        debugger;
        var input = $(event).siblings("[name=ProductVideo]");
        $(input).click();
    }
    function getProductVideoImgFile(event) {
        var input = $(event).siblings("[name=ProductVideoImg]");
        $(input).click();
    }

    function readURLThumnale(input) {
        debugger;
        if (input.files && input.files[0]) {
            var reader = new FileReader();

            reader.onload = function (e) {
                var img = $(input).parent().parent().find("img.Thumbnail");
                $(img).attr('src', e.target.result);
            }

            reader.readAsDataURL(input.files[0]);
        }
    }
</script>

