@model University.UI.Areas.Admin.Models.HomeBannerViewModel
@{
    ViewBag.Title = "Home Banner";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    #image-preview {
        width: 250px;
        height: 250px;
    }
</style>

<!-- Content Header (Page header) -->
<div class="content-header">
    <div class="container-fluid">
        <div class="row mb-2" style="margin-top:10px">
            <div class="col-sm-12" >
                <h1 class="m-0 text-dark">Home</h1>
            </div><!-- /.col -->
            <div class="col-sm-12">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="~/Home/index">Administration</a></li>
                    <li class="breadcrumb-item active">Home Banner</li>
                </ol>
            </div><!-- /.col -->
        </div><!-- /.row -->
    </div><!-- /.container-fluid -->
</div>
<!-- /.content-header -->
<!-- Main content -->
<section class="content">
    <div class="container-fluid">
        <div class="row justify-center">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-body">
                        <form id="homeBannerForm" action="/Admin/HomeBanner/AddEditHomeBanner" enctype="multipart/form-data" method="post">
                            @*@if (Convert.ToInt32(Session["UserSessionIDs"]) == Model.AssocitedID)
                            {*@
                           
                            <div class="row">
                                <div class="col-sm-6">

                                    @Html.HiddenFor(m => m.Id)
                                    <div class="form-group">
                                        <label for="email">Title</label>
                                        <input name="AssocitedID" id="HomebannerAssocitedID" type="hidden" />
                                        @Html.TextBoxFor(m => m.Title, new { @class = "form-control txtOnly", @required = "required", @pattern = "^[^<>%$*@!#]*$", @title = "Special characters are not allowed." })
                                        @Html.ValidationMessageFor(x => x.Title, null, new { @class = "", style = "color:red;" })
                                        @*@Html.ValidationMessageFor(m => m.Title)*@
                                    </div>
                                    <div class="form-group">
                                        <label for="email">Description</label>
                                        @Html.TextAreaFor(m => m.Description, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(x => x.Description, null, new { @class = "", style = "color:red;" })
                                        @*@Html.ValidationMessageFor(m => m.Description)*@
                                    </div>
                                    <div class="form-group">
                                        <label for="ImageUrl">Image alt (SEO)</label>
                                        @Html.TextBoxFor(m => m.ImageALT, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.ImageALT)
                                    </div>
                                    <div class="form-group">
                                        <label for="ImageUrl">Link To</label>
                                        @Html.TextBoxFor(m => m.LinkTo, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.LinkTo)
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    @*<div class="form-group">
                    <label for="ImageUrl">Image <span class="ShortText">(Please ensure featured image size is Less than 2MB)</span></label>
                    <input type="file" id="file" name="file" class="form-control" required accept="image/gif, image/jpeg, image/png" onchange="readURL(this);" />
                    @Html.ValidationMessageFor(m => m.ImageURL)
                    <img id="blah" src="@(Model?.ImageFullPath)" alt="" width="250" height="250" onerror="this.onerror = null; this.src = '/images/NoImageAvailable.jpg';" />
                </div>*@
                                    <div class="form-group">
                                        <label class="info-text" for="ImageUrl" style="color:red;">Image <span class="ShortText">(Please ensure featured image size is Less than 2MB)</span></label>
                                        <div class="input-group">
                                            <div class="custom-file">
                                                <input type="file" name="file" class="custom-file-input" id="file" required accept="image/jpeg" onchange="readURL(this);">
                                                @if (Model.ImageURL != "")
                                                {
                                                    <label class="custom-file-label" for="exampleInputFile">@Model.ImageURL</label>
                                                }
                                                else
                                                {
                                                    <label class="custom-file-label" for="exampleInputFile">Select Image</label>
                                                }

                                                @*<label class="custom-file-label" for="exampleInputFile">Select Image</label>*@
                                            </div>
                                        </div>

                                        @Html.ValidationMessageFor(m => m.ImageURL)
                                        <img id="image-preview" src=@Model.CheckImage alt="" class="imgStd" onerror="this.onerror = null; this.src = '/images/NoImageAvailable.jpg';" />

                                        @*<img id="image-preview" src="@Model.CheckImage" alt="" class="imgStd" onerror="this.onerror = null; this.src = '/images/NoImageAvailable.jpg';" />*@
                                        @*<img id="image-preview" src="~/Images/Training2.png" alt="" class="imgStd" onerror="this.onerror = null; this.src = '/images/NoImageAvailable.jpg';" />*@

                                    </div>
                                </div>
                            </div>
                            <div class="right">
                                <button type="submit" class="btn btn-primary homebanner">Save</button>
                                @if (Model != null && Model.ImageFullPath != null)
                                {
                                    <input type="button" class="btn btn-primary ConfirmBtn" value="Delete"  onclick="DeleteBanner('@Model.Id')"/>
                                }
                                <button onclick="Cancel()" type="button" class="btn btn-default">Cancel</button>
                            </div>
                            @*}*@
                        </form>
                    </div>
                    <!-- /.card-body -->
                </div>
                <!-- /.card -->
            </div>
        </div>
    </div><!-- /.container-fluid -->
</section>
<!-- /.content -->
<script src="~/Scripts/ProjectValidation.js"></script>
<script>
    $(document).ready(function () {
        bsCustomFileInput.init();

        var image = "@(Model?.ImageURL)";
        if (image) {
            $("#file").removeAttr("required");
        }
    });
    //$('.homebanner').click(function () {
    //    if ($('#ddlusrlst').val() == 0) {
    //        _showErrorMessage("First Select User");

    //    }
    //    else
    //    {
    //           //$('#homeBannerForm').modal('show');
    //    }

    //})
    
    function readURL(input) {
        if (input.files && input.files[0]) {
            var reader = new FileReader();
            reader.onload = function (e) {
                $('#image-preview').attr('src', e.target.result);
            };
            reader.readAsDataURL(input.files[0]);
        }
    }

    function DeleteBanner(Id) {
       // alert();
      //  $('.overlayDelete').css({ "visibility": "visible", "opacity": "1" });
        $(document).on('click', '.ConfirmBtn', function () {
            $.ajax({
                type: "POST",
                url: "/Admin/HomeBanner/DeleteHomeBanner",
                data: { Id: Id }, // serializes the form's elements.
                success: function (data) {
                    //alert("Data Deleted Successfully"); // show response from the php script.
                    location.reload();
                }
            });
        });
    }

    $(document).on('submit', '#homeBannerForm', function (e) {
        // code
       // $('#HomebannerAssocitedID').val($("#ddlusrlst").val());
       // alert($("#ddlusrlst").val());
        var form = $(this);
        var url = form.attr('action');
        var formData = new FormData($(this)[0]);
        $.ajax({
            type: "POST",
            url: url,
            data: formData, // serializes the form's elements.
            enctype: 'multipart/form-data',
            cache: false,
            contentType: false,
            processData: false,
            success: function (data) {
                $('.overlayNew').css({ "visibility": "visible", "opacity": "1" });
                //alert("Data Saved Successfully"); // show response from the php script.
                _showSuccessMessage("Home Banner Saved Succesfully");
                setTimeout(function () {
                    location.reload();
                }, 1500);
            }
        });

        e.preventDefault();
    });
    function Cancel() {
        window.location.href = '/Home/index';
    }
</script>
